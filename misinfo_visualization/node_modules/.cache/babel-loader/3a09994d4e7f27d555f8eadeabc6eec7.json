{"ast":null,"code":"var _jsxFileName = \"/Users/victor/Desktop/misinformation/misinfo_visualization/src/components/round.jsx\";\nimport React, { Component } from \"react\";\nimport \"../css/round.css\";\nimport { ArcherElement } from \"react-archer\";\n\nvar headlineJson = require(\"../allHeadlines.json\");\n\nclass Round extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }\n    }, this.props.cards.map((card, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.getCardClasses(card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }\n    }, this.getHeadline(card), /*#__PURE__*/React.createElement(ArcherElement, {\n      id: this.makeCurrentID(this.props.roundNo, card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrowEnd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }\n    })), this.isArrow(this.props.arrowcards, card) ? /*#__PURE__*/React.createElement(ArcherElement, {\n      id: this.makeArrowID(this.props.roundNo, card),\n      relations: this.generateRelations(this.props.roundNo, card),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrowEnd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 19\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"caption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, this.getMisinfoTactic(card)))));\n  }\n\n  getHeadline(card) {\n    if (card != null) {\n      return headlineJson[card][\"headline\"];\n    } else {\n      return \"Empty Turn\";\n    }\n  }\n\n  getMisinfoTactic(card) {\n    if (card != null) {\n      return headlineJson[card][\"tactic\"];\n    } else {\n      return \"\";\n    }\n  }\n\n  isArrow(arrowcards, card) {\n    return arrowcards.hasOwnProperty(card);\n  }\n\n  generateRelations(round, headlineId) {\n    var reljson = {\n      targetAnchor: \"left\",\n      sourceAnchor: \"right\"\n    };\n    reljson.targetId = this.makePrevID(round, headlineId);\n    return [reljson];\n  }\n\n  makeArrowID(round, headlineId) {\n    let id = \"arrow-\" + round + \"-\" + headlineId;\n    return id;\n  }\n\n  makePrevID(round, headlineId) {\n    let id = \"round-\" + (round - 1) + \"-\" + headlineId;\n    return id;\n  }\n\n  makeCurrentID(round, headlineId) {\n    let id = \"round-\" + round + \"-\" + headlineId;\n    return id;\n  }\n\n  getCardClasses(card) {\n    if (card != null) {\n      let classes = \"card \";\n      classes += headlineJson[card][\"isMisinfo\"] == \"Misinfo\" ? \"misinfo\" : \"neutral\";\n      return classes;\n    } else {\n      return \"card null\";\n    }\n  }\n\n}\n\nexport default Round;","map":{"version":3,"sources":["/Users/victor/Desktop/misinformation/misinfo_visualization/src/components/round.jsx"],"names":["React","Component","ArcherElement","headlineJson","require","Round","render","props","cards","map","card","index","getCardClasses","getHeadline","makeCurrentID","roundNo","isArrow","arrowcards","makeArrowID","generateRelations","getMisinfoTactic","hasOwnProperty","round","headlineId","reljson","targetAnchor","sourceAnchor","targetId","makePrevID","id","classes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/round.css\";\nimport { ArcherElement } from \"react-archer\";\n\nvar headlineJson = require(\"../allHeadlines.json\");\n\nclass Round extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.cards.map((card, index) => (\n          <div key={index}>\n            <div className={this.getCardClasses(card)}>\n              {this.getHeadline(card)}\n              <ArcherElement id={this.makeCurrentID(this.props.roundNo, card)}>\n                <div className=\"arrowEnd\"></div>\n              </ArcherElement>\n\n              {this.isArrow(this.props.arrowcards, card) ? (\n                <ArcherElement\n                  id={this.makeArrowID(this.props.roundNo, card)}\n                  relations={this.generateRelations(this.props.roundNo, card)}\n                >\n                  <div className=\"arrowEnd\"></div>\n                </ArcherElement>\n              ) : (\n                <div></div>\n              )}\n            </div>\n            <div className=\"caption\">{this.getMisinfoTactic(card)}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  getHeadline(card) {\n    if (card != null) {\n      return headlineJson[card][\"headline\"];\n    } else {\n      return \"Empty Turn\";\n    }\n  }\n\n  getMisinfoTactic(card) {\n    if (card != null) {\n      return headlineJson[card][\"tactic\"];\n    } else {\n      return \"\";\n    }\n  }\n\n  isArrow(arrowcards, card) {\n    return arrowcards.hasOwnProperty(card);\n  }\n\n  generateRelations(round, headlineId) {\n    var reljson = {\n      targetAnchor: \"left\",\n      sourceAnchor: \"right\",\n    };\n    reljson.targetId = this.makePrevID(round, headlineId);\n    return [reljson];\n  }\n\n  makeArrowID(round, headlineId) {\n    let id = \"arrow-\" + round + \"-\" + headlineId;\n    return id;\n  }\n\n  makePrevID(round, headlineId) {\n    let id = \"round-\" + (round - 1) + \"-\" + headlineId;\n    return id;\n  }\n\n  makeCurrentID(round, headlineId) {\n    let id = \"round-\" + round + \"-\" + headlineId;\n    return id;\n  }\n\n  getCardClasses(card) {\n    if (card != null) {\n      let classes = \"card \";\n      classes +=\n        headlineJson[card][\"isMisinfo\"] == \"Misinfo\" ? \"misinfo\" : \"neutral\";\n      return classes;\n    } else {\n      return \"card null\";\n    }\n  }\n}\n\nexport default Round;\n"]},"metadata":{},"sourceType":"module"}